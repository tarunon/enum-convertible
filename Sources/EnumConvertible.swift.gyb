%{
    def join(xs, j=", "):
        return j.join(xs)
    def enumerateT(n):
        return join(["T{}".format(i) for i in range(n)])
    enumNumbers = range(2, int(MAX_SERIAL_NUMBER) + 1)
    if len(SPECIFIC_NUMBERS) > 0:
        enumNumbers += [int(s) for s in SPECIFIC_NUMBERS.split(',')]
}%

% for enumNumber in enumNumbers:
public enum Enum${enumNumber}<${enumerateT(enumNumber)}> {
    % for caseNumber in range(enumNumber):
    case case${caseNumber}(T${caseNumber})
    % end
}

public protocol Enum${enumNumber}Convertible {
    % for caseNumber in range(enumNumber):
    associatedtype T${caseNumber}
    % end
    var asEnum: Enum${enumNumber}<${enumerateT(enumNumber)}> { get }
}

extension Enum${enumNumber}: Enum${enumNumber}Convertible {
    public var asEnum: Enum${enumNumber} {
        return self
    }
}
% end
