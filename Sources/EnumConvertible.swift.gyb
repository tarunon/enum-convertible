%{
    def join(xs, j=", "):
        return j.join(xs)
    def enumerateT(n):
        return join(["T{}".format(i) for i in range(n)])
    def constraintN(n):
        all = range(n)
        res = ["T{} == T{}".format(all[0], i) for i in all[1:]]
        return ["where " + res[0]] + [", " + x for x in res[1:]]
    def mapReturnType(enumNumber, caseNumber):
        return "AnyEnum{}<{}>".format(enumNumber, ", ".join(["T{}".format(i) if i != caseNumber else "T" for i in range(enumNumber)]))
    def initConstraintN(n):
        all = range(n)
        res = ["T{} == E.T{}".format(i, i) for i in all]
        return ["where " + res[0]] + [", " + x for x in res[1:]]

    enumNumbers = range(2, int(MAX_SERIAL_NUMBER) + 1)
    if len(SPECIFIC_NUMBERS) > 0:
        enumNumbers += [int(s) for s in SPECIFIC_NUMBERS.split(',')]
}%

% for enumNumber in enumNumbers:
public enum AnyEnum${enumNumber}<${enumerateT(enumNumber)}> {
    % for caseNumber in range(enumNumber):
    case case${caseNumber}(T${caseNumber})
    % end

    public init<E: Enum${enumNumber}Convertible>(_ source: E)
    % for constraint in initConstraintN(enumNumber):
        ${constraint}
    % end
    {
        self = source.asEnum()
    }
}

public protocol Enum${enumNumber}Convertible {
    % for caseNumber in range(enumNumber):
    associatedtype T${caseNumber}
    % end
    func asEnum() -> AnyEnum${enumNumber}<${enumerateT(enumNumber)}>
}

extension AnyEnum${enumNumber}: Enum${enumNumber}Convertible {
    public func asEnum() -> AnyEnum${enumNumber} {
        return self
    }
}

extension Enum${enumNumber}Convertible
    % for constraints in constraintN(enumNumber):
    ${constraints}
    % end
{
    public func unwrapped() -> T0 {
        switch self.asEnum() {
    % for caseNumber in range(enumNumber):
            case .case${caseNumber}(let x): return x
    % end
        }
    }
}

extension Enum${enumNumber}Convertible {
    % for caseNumber in range(enumNumber):
    public func map${caseNumber}<T>(_ f: (T${caseNumber}) throws -> T) rethrows -> ${mapReturnType(enumNumber, caseNumber)} {
        switch self.asEnum() {
        % for caseNumber2 in range(enumNumber):
            % if caseNumber == caseNumber2:
        case .case${caseNumber2}(let x): return try .case${caseNumber2}(f(x))
            % else:
        case .case${caseNumber2}(let x): return .case${caseNumber2}(x)
            % end
        % end
        }
    }

    % end
}

extension Enum${enumNumber}Convertible where Self: Equatable
    % for caseNumber in range(enumNumber):
    , T${caseNumber}: Equatable
    % end
{
    public static func == (lhs: Self, rhs: Self) -> Bool {
        switch (lhs.asEnum(), rhs.asEnum()) {
    % for caseNumber in range(enumNumber):
        case (.case${caseNumber}(let lhsv), .case${caseNumber}(let rhsv)):
            return lhsv == rhsv
    % end
        default:
            return false
        }
    }
}

#if swift(>=4.1)

extension AnyEnum${enumNumber}: Equatable
    where T0: Equatable
    % for caseNumber in range(enumNumber-1):
    , T${caseNumber+1}: Equatable
    % end
{}

#endif

extension Enum${enumNumber}Convertible {
    % for caseNumber in range(enumNumber):
    public func asOptional${caseNumber}() -> T${caseNumber}? {
        switch self.asEnum() {
        % for caseNumber2 in range(enumNumber):
            % if caseNumber == caseNumber2:
        case .case${caseNumber2}(let x): return Optional.some(x)
            % else:
        case .case${caseNumber2}: return Optional.none
            % end
        % end
        }
    }

    % end
}

% end

// MARK: deprecated

% for enumNumber in enumNumbers:
@available(*, deprecated, renamed: "AnyEnum${enumNumber}")
public typealias Enum${enumNumber}<${enumerateT(enumNumber)}> = AnyEnum${enumNumber}<${enumerateT(enumNumber)}>
% end
